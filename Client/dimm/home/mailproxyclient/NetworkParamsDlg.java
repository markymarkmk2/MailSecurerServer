package dimm.home.mailproxyclient;

/*
 * NetworkParams.java
 *
 * Created on 8. Oktober 2007, 18:30
 */



import java.util.StringTokenizer;
import javax.swing.SpinnerNumberModel;
import dimm.home.mailproxyclient.Utilities.ParseToken;

/**
 *
 * @author  Administrator
 */
public class NetworkParamsDlg extends javax.swing.JDialog
{
    String ip;
    String mask;
    String gw;
    String dns;
    boolean dhcp;
    boolean px_enable;
    String px_server;
    String px_port;
    String px_socksport;
    
    MainFrame parent;

    
    /** Creates new form NetworkParams */
    public NetworkParamsDlg(MainFrame _parent)
    {
        super(_parent, true);
        
        parent = _parent;
        
        initComponents();
        
        
        SP_ETH.setModel( new SpinnerNumberModel(0, 0, 10, 1) );
        
        read_params();
    }
    
    void read_params()
    {
        int eth_nr = ((Integer)this.SP_ETH.getValue()).intValue();
        
        boolean ok =  parent.send_cmd( "IPCONFIG CMD:GET IF:" + eth_nr);
        if (ok)
        {
            ParseToken pt = new ParseToken( parent.get_answer() );
            dhcp = pt.GetBoolean("DHCP:");
            ip = pt.GetString("IP:");
            mask = pt.GetString("MASK:");
            gw = pt.GetString("GW:");
            dns = pt.GetString("DNS:");
            px_enable = pt.GetBoolean("PXE:");
            px_server = pt.GetString("PXS:");            
            px_port = pt.GetString("PXP:");
            px_socksport = pt.GetString("PXSP:");
            
            if (dhcp)
            {
                RB_AUTO.setSelected( true );
                RB_AUTOActionPerformed( null );
            }
            else
            {
                RB_MAN.setSelected( true );
                RB_MANActionPerformed( null );
            }
            
            this.CB_PXENABLE.setSelected( px_enable );            
            CB_PXENABLEActionPerformed( null );
                
        }
        else
        {
        }
    }
    
    static boolean check_ip(String ip)
    {
        try
        {
            StringTokenizer sto  = new StringTokenizer( ip, "." );
            for (int i = 0; i < 4; i++)
            {
                int n = Integer.parseInt( sto.nextToken() );
                if (n < 0 || n > 255)
                    return false;
                
                if (i == 0 && n == 0)
                    return false;
            }
            if (sto.hasMoreTokens())
                return false;
            
            return true;                        
        }
        catch (Exception exc)
        {}
        return false;
    }
    
    boolean check_params()
    {
        px_enable = CB_PXENABLE.isSelected();
        if (px_enable)
        {
            px_server = TXT_PXSERVER.getText();
            if (!check_ip( px_server  ))
                return false;
            
            try
            {
                px_port = TXT_PXPORT.getText();
                long l = Long.parseLong(px_port );
                // EMPTY MEANS NO SOCKS PROXY
/*                px_socksport = TXT_PXSOCKSPORT.getText();
                l = Long.parseLong(px_socksport );
  */          }
            catch (Exception exc )
            {
                return false;
            }
        }
        
        dhcp = RB_AUTO.isSelected();
        if (dhcp)
            return true;
        
        ip   = TXT_IP.getText();
        mask = TXT_MASK.getText();
        gw   = TXT_GW.getText();
        dns  = TXT_DNS.getText();
        
        if (!check_ip( ip ))
            return false;
        if (!check_ip( gw ))
            return false;
        if (!check_ip( mask ))
            return false;
        if (!check_ip( dns ))
            return false;

        
        return true;
    }

    void update_display()
    {
        dhcp = RB_AUTO.isSelected();
        
        if (dhcp)
        {
            TXT_IP.setEnabled( false );
            TXT_MASK.setEnabled( false );
            TXT_GW.setEnabled( false );
            TXT_DNS.setEnabled( false );

            TXT_IP.setText( "");
            TXT_MASK.setText( "" );
            TXT_GW.setText( "" );
            TXT_DNS.setText( "" );
        }
        else
        {
            TXT_IP.setEnabled( true );
            TXT_MASK.setEnabled( true );
            TXT_GW.setEnabled( true );
            TXT_DNS.setEnabled( true );

            TXT_IP.setText( ip );
            TXT_MASK.setText( mask );
            TXT_GW.setText( gw );
            TXT_DNS.setText( dns );
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Erzeugter Quelltext ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        BTG_NETWORK = new javax.swing.ButtonGroup();
        SP_ETH = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        RB_MAN = new javax.swing.JRadioButton();
        RB_AUTO = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        TXT_IP = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TXT_MASK = new javax.swing.JTextField();
        TXT_DNS = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TXT_GW = new javax.swing.JTextField();
        CB_PXENABLE = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TXT_PXSERVER = new javax.swing.JTextField();
        TXT_PXPORT = new javax.swing.JTextField();
        TXT_PXSOCKSPORT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        BT_OK = new javax.swing.JButton();
        BT_ABORT = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Netzwerparameter setzen");
        SP_ETH.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                SP_ETHStateChanged(evt);
            }
        });

        jLabel1.setText("Schnittstelle");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Netzwerkparameter"));
        BTG_NETWORK.add(RB_MAN);
        RB_MAN.setText("Manuell");
        RB_MAN.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        RB_MAN.setMargin(new java.awt.Insets(0, 0, 0, 0));
        RB_MAN.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RB_MANActionPerformed(evt);
            }
        });

        BTG_NETWORK.add(RB_AUTO);
        RB_AUTO.setText("Automatisch");
        RB_AUTO.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        RB_AUTO.setMargin(new java.awt.Insets(0, 0, 0, 0));
        RB_AUTO.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                RB_AUTOActionPerformed(evt);
            }
        });

        jLabel2.setText("IP-Nummer");

        jLabel3.setText("Netzwerkmaske");

        jLabel4.setText("DNS-Server");

        jLabel5.setText("Gateway");

        CB_PXENABLE.setText("Proxy");
        CB_PXENABLE.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        CB_PXENABLE.setMargin(new java.awt.Insets(0, 0, 0, 0));
        CB_PXENABLE.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                CB_PXENABLEActionPerformed(evt);
            }
        });

        jLabel6.setText("HTTP-Port");

        jLabel7.setText("Proxyserver");

        jLabel8.setText("SOCKS-Port");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(RB_MAN))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(RB_AUTO))
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(CB_PXENABLE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel3)
                            .add(jLabel2)
                            .add(jLabel5)
                            .add(jLabel4)
                            .add(jLabel7)
                            .add(jLabel6)
                            .add(jLabel8))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(TXT_PXSOCKSPORT, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, TXT_GW, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .add(TXT_MASK, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .add(TXT_IP, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, TXT_DNS, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .add(TXT_PXPORT, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                            .add(TXT_PXSERVER, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(RB_AUTO)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(RB_MAN)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(TXT_IP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(TXT_MASK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(15, 15, 15)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(TXT_GW, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(TXT_DNS, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(CB_PXENABLE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel6)
                        .add(TXT_PXPORT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel7)
                            .add(TXT_PXSERVER, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(26, 26, 26)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(TXT_PXSOCKSPORT, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BT_OK.setText("Setzen");
        BT_OK.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BT_OKActionPerformed(evt);
            }
        });

        BT_ABORT.setText("Abbruch");
        BT_ABORT.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BT_ABORTActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(SP_ETH, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 49, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(BT_ABORT)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(BT_OK)))
                .addContainerGap())
        );

        layout.linkSize(new java.awt.Component[] {BT_ABORT, BT_OK}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(SP_ETH, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(BT_OK)
                    .add(BT_ABORT))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CB_PXENABLEActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_CB_PXENABLEActionPerformed
    {//GEN-HEADEREND:event_CB_PXENABLEActionPerformed
// TODO Ihre Ereignisbehandlung hier einf�gen:
        TXT_PXPORT.setEnabled( CB_PXENABLE.isSelected() );
        TXT_PXSOCKSPORT.setEnabled( CB_PXENABLE.isSelected() );
        TXT_PXSERVER.setEnabled( CB_PXENABLE.isSelected() );
        
        if(CB_PXENABLE.isSelected())
        {
            TXT_PXPORT.setText(  px_port );
            TXT_PXSOCKSPORT.setText(  px_socksport );
            TXT_PXSERVER.setText( px_server );
        }
        else
        {
            TXT_PXPORT.setText( "" );
            TXT_PXSOCKSPORT.setText( "" );
            TXT_PXSERVER.setText( "" );
        }
    }//GEN-LAST:event_CB_PXENABLEActionPerformed

    private void BT_ABORTActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_ABORTActionPerformed
    {//GEN-HEADEREND:event_BT_ABORTActionPerformed
// TODO Ihre Ereignisbehandlung hier einf�gen:
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_BT_ABORTActionPerformed

    private void BT_OKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_BT_OKActionPerformed
    {//GEN-HEADEREND:event_BT_OKActionPerformed
// TODO Ihre Ereignisbehandlung hier einf�gen:
        if (!parent.check_logged_in())
        {
            return;
        }

        if (check_params())
        {
            write_params();
            this.setVisible(false);
            this.dispose();
        }   
        else
        {
            parent.errm_ok( "Die Netzwerkparameter sind nicht korrekt! Bitte geben Sie die Netzwerkadressen als echte IP-Nummern an (aaa.bbb.ccc.ddd)");
        }
            
    }//GEN-LAST:event_BT_OKActionPerformed

    private void SP_ETHStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_SP_ETHStateChanged
    {//GEN-HEADEREND:event_SP_ETHStateChanged
// TODO Ihre Ereignisbehandlung hier einf�gen:
        read_params();        
        
    }//GEN-LAST:event_SP_ETHStateChanged

    private void RB_MANActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RB_MANActionPerformed
    {//GEN-HEADEREND:event_RB_MANActionPerformed
// TODO Ihre Ereignisbehandlung hier einf�gen:
        update_display();
        
    }//GEN-LAST:event_RB_MANActionPerformed

    private void RB_AUTOActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_RB_AUTOActionPerformed
    {//GEN-HEADEREND:event_RB_AUTOActionPerformed
// TODO Ihre Ereignisbehandlung hier einf�gen:
        update_display();
    
    }//GEN-LAST:event_RB_AUTOActionPerformed

    private void write_params()
    {
        
        int eth_nr = ((Integer)this.SP_ETH.getValue()).intValue();
        
        String cmd = "IPCONFIG CMD:SET IF:" + eth_nr + " DHCP:" + (RB_AUTO.isSelected() ? "1" : "0") + " IP:" + ip + " MASK:" + mask + " GW:" + gw + 
                  " DNS:" + dns + " PXE:" + (px_enable ? "1" : "0") + " PXS:" + px_server + " PXP:" + px_port + " PXSP:" + px_socksport;
        
        boolean ok =  parent.send_cmd( cmd);
        if (ok)
            parent.errm_ok( "Die Netzwerkparameter wurden �bernommen");            
        else
        {
            String err_str = parent.get_answer_err_text();
            
            parent.errm_ok( "Das Netzwerk konnte nicht initialisiert werden: " + err_str);            
        }
            
        
    }
    

    
    // Variablendeklaration - nicht modifizieren//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BTG_NETWORK;
    private javax.swing.JButton BT_ABORT;
    private javax.swing.JButton BT_OK;
    private javax.swing.JCheckBox CB_PXENABLE;
    private javax.swing.JRadioButton RB_AUTO;
    private javax.swing.JRadioButton RB_MAN;
    private javax.swing.JSpinner SP_ETH;
    private javax.swing.JTextField TXT_DNS;
    private javax.swing.JTextField TXT_GW;
    private javax.swing.JTextField TXT_IP;
    private javax.swing.JTextField TXT_MASK;
    private javax.swing.JTextField TXT_PXPORT;
    private javax.swing.JTextField TXT_PXSERVER;
    private javax.swing.JTextField TXT_PXSOCKSPORT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    // Ende der Variablendeklaration//GEN-END:variables
    
}
